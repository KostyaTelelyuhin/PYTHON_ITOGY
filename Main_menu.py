# -*- coding: utf-8 -*-
"""main2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mYeO0DqyOPheW1TJPlcv_nTreeWwY08A
"""

import math
import random
import numpy as np
import pygame
import random
import sys

from pygame.locals import (
    RLEACCEL,
    KEYDOWN,
    K_SPACE,
    K_ESCAPE,
    QUIT,
)


RED = 0xFF0000
BLUE = 0x0000FF
YELLOW = 0xFFC91F
GREEN = 0x00FF00
MAGENTA = 0xFF03B8
CYAN = 0x00FFCC
BLACK = (0, 0, 0)
WHITE = 0xFFFFFF
GREY = 0x7D7D7D


# Инициализация Pygame
pygame.init()

# Размеры окна
WIDTH = 800
HEIGHT = 600

# Цвета
white = (255, 255, 255)
black = (0, 0, 0)

g = 1
k = 1 # В будущем можно поправить, чтоб вверх ногами летало
FPS = 30
# Создание окна
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Пример кнопок в Pygame")
main_menu_image = pygame.image.load("/Users/forcs2/Desktop/MAIN_MENU.png")
# Класс для кнопок
f1 = open('/Users/forcs2/Downloads/LEVEL1.txt', 'r')

def find_floor_pos(player, Rectangles):
    Floor = [3/4 * HEIGHT]
    for r in Rectangles:
        if r.y < player.y + player.a:
            continue
        if abs(r.x - player.x) >  r.l / 2:
            continue
        Floor.append(r.y - r.h)
    Floor.sort()
    return Floor[0]

def find_ceil_pos(player, Rectangles):
    Ceil = [0]
    for r in Rectangles:
        if r.y > player.y + player.a:
            continue
        if abs(r.x - player.x) >  r.l / 2:
            continue
        Ceil.append(r.y)
    Ceil.sort()
    return Ceil[-1]

def intersection(x1, y1, angle1, l1, h1, x2, y2, angle2, l2, h2):
    angle = angle1 - angle2
    x = x1 - x2
    y = y1 - y2

    if abs(x + h1 / 2 * np.cos(angle) + l1 / 2 * np.sin(angle)) < l2/2 and abs(y + h1 / 2 * np.sin(angle) - l1 / 2 * np.cos(angle)) < h2/2:
        return False
    elif abs(x - h1 / 2 * np.cos(angle) + l1 / 2 * np.sin(angle)) < l2/2 and abs(y - h1 / 2 * np.sin(angle) - l1 / 2 * np.cos(angle)) < h2/2:
        return False
    elif abs(x - h1 / 2 * np.cos(angle) - l1 / 2 * np.sin(angle)) < l2/2 and abs(y - h1 / 2 * np.sin(angle) + l1 / 2 * np.cos(angle)) < h2/2:
        return False
    elif abs(x + h1 / 2 * np.cos(angle) - l1 / 2 * np.sin(angle)) < l2/2 and abs(y + h1 / 2 * np.sin(angle) + l1 / 2 * np.cos(angle)) < h2/2:
        return False
    angle = angle2 - angle1
    x = x2 - x1
    y = y2 - y1
    if abs(x + h2 / 2 * np.cos(angle) + l2 / 2 * np.sin(angle)) < l1/2 and abs(y + h2 / 2 * np.sin(angle) - l2 / 2 * np.cos(angle)) < h1/2:
        return False
    elif abs(x - h2 / 2 * np.cos(angle) + l2 / 2 * np.sin(angle)) < l1/2 and abs(y - h2 / 2 * np.sin(angle) - l2 / 2 * np.cos(angle)) < h1/2:
        return False
    elif abs(x - h2 / 2 * np.cos(angle) - l2 / 2 * np.sin(angle)) < l1/2 and abs(y - h2 / 2 * np.sin(angle) + l2 / 2 * np.cos(angle)) < h1/2:
        return False
    elif abs(x + h2 / 2 * np.cos(angle) - l2 / 2 * np.sin(angle)) < l1/2 and abs(y + h2 / 2 * np.sin(angle) + l2 / 2 * np.cos(angle)) < h1/2:
        return False
    else:
        return True

class Button:
    def __init__(self, x, y, width, height, color, text, action=None):
        self.rect = pygame.Rect(x, y, width, height)
        self.color = color
        self.text = text
        self.action = action

    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect)
        font = pygame.font.Font(None, 36)
        text = font.render(self.text, True, black)
        text_rect = text.get_rect(center=self.rect.center)
        screen.blit(text, text_rect)

    def check_click(self, pos):
        if self.rect.collidepoint(pos):
            if self.action:
                self.action()

# Функция для открытия нового окна


class triangle:
    def __init__(self, x, y , screen,angle = 0):
        self.x = float(x)
        self.y = float(y)
        self.angle = float(angle)
        self.screen = screen
        self.vx = -7
        self.h = float(30)
        self.l = float(15)
        self.color = BLACK
    def move(self):
        self.x = self.x + self.vx
    def draw(self):
        if self.angle == 0:
            pygame.draw.polygon(self.screen, self.color,[[self.x-self.l , self.y],[self.x+self.l, self.y],[self.x, self.y-self.h]] )
        if self.angle == 3.1415926:
            pygame.draw.polygon(self.screen, self.color,[[self.x, self.y],[self.x+self.l, self.y - self.h],[self.x - self.l, self.y-self.h]])
class Rectangle:
    def __init__(self, x, y, screen, h = 30, l = 30):
        self.x = float(x)
        self.y = float(y)
        self.screen = screen
        self.vx = -7
        self.h = float(h)
        self.l = float(l)
        self.color = CYAN
    def move(self):
        self.x = self.x + self.vx
    def draw(self):
        pygame.draw.polygon(self.screen, self.color,[[self.x - self.l/2, self.y - self.h],
                                                     [self.x + self.l/2, self.y - self.h],
                                                     [self.x + self.l/2, self.y],
                                                     [self.x - self.l/2, self.y]] )
class Portal:
    def __init__(self,x, y,type,screen):
        # Центр низа портала
        self.x = float(x)
        self.y = float(y)
        self.type = type
        self.screen = screen
        self.vx = -7
        if type == 'plane':
            self.color = BLUE
        elif type == 'square':
            print(1)
            self.color = GREEN
        elif type == 'ufo':
            self.color = RED
    def draw(self):
        pygame.draw.ellipse(self.screen, self.color, (self.x, self.y - 100, 15, 100), 2)
    def move(self):
        self.x = self.x + self.vx
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super(Player, self).__init__()
        self.surf = pygame.image.load("/Users/forcs2/Desktop/Geometry_dash/x210.jpg").convert()
        self.x = 1/4 *WIDTH
        self.y = 300
        self.angle = 0
        self.rect = self.surf.get_rect(
            center=(self.x, self.y)
        )
        self.v = 0


    # Move the sprite based on keypresses
    def update(self, pressed_keys):
        if self.v != 0:
            self.rect.move_ip(0, self.v)
            self.y += self.v
            self.angle = 57.29578 * math.atan2(-self.v, 30)
            self.rotate()
        if pressed_keys[K_SPACE]:
            self.v = self.v - 2
        self.v = self.v + 1
        if self.rect.bottom >= 3/4*HEIGHT and self.v >= 0:
            self.rect.bottom = 3/4*HEIGHT
            self.v = 0
            self.angle += 5
            if self.angle > -1:
                self.angle = 0
                self.y = self.rect.centery
                self.x = self.rect.centerx
            self.rotate3()
        if self.rect.top <= 0 and self.v <= 0:
            self.rect.top = 0
            self.v = 0
            self.angle = self.angle - 5
            if self.angle < 1:
                self.angle = 0
                self.y = self.rect.centery
                self.x = self.rect.centerx
            self.rotate2()

    def rotate(self):
        self.surf = pygame.transform.rotate(pygame.image.load("/Users/forcs2/Downloads/spiral.png").convert(), self.angle)
        self.rect = self.surf.get_rect(
            center=(self.x, self.y)
        )

    def rotate2(self):
        self.surf = pygame.transform.rotate(pygame.image.load("/Users/forcs2/Downloads/spiral.png").convert(), self.angle)
        self.rect = self.surf.get_rect(
            centerx=self.x,
            top=self.rect.top
        )

    def rotate3(self):
        self.surf = pygame.transform.rotate(pygame.image.load("/Users/forcs2/Downloads/spiral.png").convert(), self.angle)
        self.rect = self.surf.get_rect(
            centerx=self.x,
            bottom=self.rect.bottom
        )


class UFO:
    def __init__(self, screen, x = 1/4 * WIDTH, y = 3/4 * HEIGHT - 15):
        #Размер
        self.a = 15
        # Положение
        self.x = x
        self.y = y
        # Угол поворота
        self.angle = 0
        # Скорости
        self.vx = 0
        self.vy = 0
        self.omega = 0
        self.color = YELLOW
        self.screen = screen
    def draw(self):
        pygame.draw.lines(self.screen, self.color, True, [(self.x - self.a,self.y + self.a/3),
                                                          (self.x + self.a, self.y + self.a/3),
                                                          (self.x + self.a ,self.y + self.a),
                                                          (self.x - self.a ,self.y + self.a)], 2)
        pygame.draw.arc(self.screen, self.color, (self.x - 3/4*self.a, self.y - 3/4 *self.a , 3 * self.a/2,8*  self.a/3 ),0,  3.1415926,2)

    def oppor_jump(self):
            return True

    def jump(self):
        if self.oppor_jump() == True:
            self.vy = -12
            self.omega = 0

    def stop_jump(self):
        self.vy = 0
        self.omega = 0
        self.angle = 0

    def move(self, floor_position, ceil_position):
        # Штуки с полом: первая
       # print(ceil_position)
        if self.y + self.a > floor_position:
            self.y = floor_position - self.a
            self.omega = 0
            self.vy = 0
            self.angle = 0
        elif self.y + self.a == floor_position:
            self.y = self.y + self.vy
            self.angle = self.angle + self.omega
        else:
            self.y = self.y + self.vy
            self.vy = self.vy + g
            self.angle = self.angle + self.omega

        if ceil_position >= self.y - self.a:
            #print(ceil_position)
            self.y = self.a + ceil_position + self.a/2

class Player_Square:
    def __init__(self, screen, x = 1/4 * WIDTH, y = 3/4 * HEIGHT - 15):
        #Размер
        self.a = 15
        # Положение
        self.x = x
        self.y = y
        # Угол поворота
        self.angle = 0
        # Скорости
        self.vx = 0
        self.vy = 0
        self.omega = 0
        self.color = BLACK
        self.screen = screen
    def draw(self):
        pygame.draw.lines(self.screen, self.color, True, [(self.x - self.a*(np.cos(self.angle) - np.sin(self.angle)),
                                                            self.y + self.a* (np.cos(self.angle) + np.sin(self.angle))),
                                                          (self.x + self.a * (np.cos(self.angle) + np.sin(self.angle)),
                                                           self.y + self.a * (np.cos(self.angle) - np.sin(self.angle))),
                                                          (self.x + self.a * (np.cos(self.angle) - np.sin(self.angle)),
                                                           self.y - self.a * (np.cos(self.angle) + np.sin(self.angle))),
                                                          (self.x - self.a * (np.cos(self.angle) + np.sin(self.angle)),
                                                           self.y - self.a * (np.cos(self.angle) - np.sin(self.angle)))], 1 )

    def oppor_jump(self, Rectangles, floor_pos):
        if self.y == 3/4 * HEIGHT - self.a:
            return True
        for r in Rectangles:
            if abs(r.x - self.x) < self.a + r.l/2 and floor_pos == self.y + self.a:
                return True
        return False

    def jump(self, Rectangles ,floor_pos):
        if self.oppor_jump(Rectangles , floor_pos) == True:
            self.vy = -12
            self.omega = -0.15

    def stop_jump(self):
        self.vy = 0
        self.omega = 0
        self.angle = 0

    def move(self, floor_position):
        if self.y + self.a > floor_position:
            self.y = floor_position - self.a
            self.omega = 0
            self.vy = 0
            self.angle = 0
        elif self.y + self.a == floor_position:
            self.y = self.y + self.vy
            self.angle = self.angle + self.omega
        else:
            self.y = self.y + self.vy
            self.vy = self.vy + g
            self.angle = self.angle + self.omega

Floor_position = 3/4 * HEIGHT
TYPE_PLAYER = 'square'

def open_window_creative():
    # Создание нового окна
    new_window = pygame.display.set_mode((window_width, window_height))
    pygame.display.set_caption("Новое окно")

    # Кнопки в новом окне
    button1_cr = Button(WIDTH // 2 - 100, HEIGHT // 2 - 100, 200, 50, white, "Кнопка 1")
    button2_cr = Button(WIDTH // 2 - 100, HEIGHT // 2, 200, 50, white, "Кнопка 2")
    button3_cr = Button(WIDTH // 2 - 100, HEIGHT // 2 + 100, 200, 50, white, "Кнопка 3")

    # Основной цикл нового окна
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    pos = pygame.mouse.get_pos()
                    button1.check_click(pos)
                    button2.check_click(pos)
                    button3.check_click(pos)

        new_window.fill(black)
        button1.draw()
        button2.draw()
        button3.draw()
        pygame.display.update()
def open_window_level():
    # Создание нового окна
    new_window = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Уровни")

    # Кнопки в новом окне
    button1_lv = Button(WIDTH // 2 - 100, HEIGHT // 2 - 100, 200, 50, white, "Уровень 1")
    button2_lv = Button(WIDTH // 2 - 100, HEIGHT // 2, 200, 50, white, "Уровень 2")
    button3_lv = Button(WIDTH // 2 - 100, HEIGHT // 2 + 100, 200, 50, white, "Уровень 3")

    # Основной цикл нового окна
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    pos = pygame.mouse.get_pos()
                    button1.check_click(pos)
                    button2.check_click(pos)
                    button3.check_click(pos)
        new_window.fill(black)
        button1_lv.draw()
        button2_lv.draw()
        button3_lv.draw()
        pygame.display.update()
def main_menu():
    button1 = Button(30, 110, 160, 160, white, "Скины")
    button2 = Button(270, 70, 250, 250, white, "Уровни", open_window_level)
    button3 = Button(580, 110, 160, 160, white, "Креатив", open_window_creative)
    screen.blit(main_menu_image, (0, 0))
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    pos = pygame.mouse.get_pos()
                    button1.check_click(pos)
                    button2.check_click(pos)
                    button3.check_click(pos)

        '''button1.draw()
        button2.draw()
        button3.draw()
        '''
        pygame.display.update()
main_menu()